/* =================================================================================
Theme Mixins
================================================================================= */

// REM font-size fallback
@mixin font-size( $sizeValue ) {
	$remValue: ( $sizeValue / 10 );
	font-size: #{$sizeValue}px;
	font-size: #{$remValue}rem;
}

@mixin icon-font() {
	font-family: $font-family-icon !important;
	font-style: normal !important;
	font-weight: normal !important;
	font-variant: normal !important;
	text-transform: none !important;
	speak: none;
	line-height: 1;
	-webkit-font-smoothing: antialiased;
	-moz-osx-font-smoothing: grayscale;
}

// List styling
@mixin bullets() {
	list-style: disc outside;
	margin: 1em 0;
	padding: 0 0 0 3em;
}
@mixin numbers() {
	list-style: decimal outside;
	margin: 1em 0;
	padding: 0 0 0 3em;
}

// A helper mixin for applying high-resolution background images (http://www.retinajs.com)
@mixin at2x($path, $w: auto, $h: auto) {
	background-image: url($path);
	$at2x_path: '${path}.replace(/\.\w+$/, function(match) { return "@2x" + match; })';

	@media (-webkit-min-device-pixel-ratio: 1.5), (min--moz-device-pixel-ratio: 1.5), (-o-min-device-pixel-ratio: 3/2), (min-resolution: 1.5dppx) {
		background-image: url("${at2x_path}");
		background-size: $w $h;
	}

	@media all and (-ie-hack: 1.5) {
		background-image: url($path);
		background-size: auto;
	}
}

// Sugar to make using sprites easier
@mixin at2xsprite( $x, $y, $name: sprite, $w: 999px, $h: 999px ) {
	$path: '../images/${name}.png';
	background-image: url($path);
	background-position: $x $y;
	$at2x_path: '${path}.replace(/\.\w+$/, function(match) { return "@2x" + match; })';

	@media (-webkit-min-device-pixel-ratio: 1.5), (min--moz-device-pixel-ratio: 1.5), (-o-min-device-pixel-ratio: 3/2), (min-resolution: 1.5dppx) {
		background-image: url("${at2x_path}");
		background-size: $w $h;
		background-position: $x $y;
	}

	@media all and (-ie-hack: 1.5) {
		background-image: url($path);
		background-size: auto;
		background-position: $x $y;
	}
}

// Image replacement
@mixin sprite( $xpos, $ypos, $width, $height ) {
	background-image: url(../images/sprite.png);
	background-repeat: no-repeat;
	background-position: $xpos $ypos;
	content: '';
	@include hide-text();
	@include size($width, $height);
}
@mixin sprite-icon( $xpos, $ypos, $width, $height ) {
	background: url(../images/sprite.png) no-repeat $xpos $ypos;
	content: '';
	display: block;
	margin: -($height / 2) 0 0;
	position: absolute; top: 50%;
	@include size($width, $height);
}
@mixin sprite-text( $xpos, $ypos, $width, $height ) {
	background: url(../images/sprite.png) no-repeat $xpos $ypos;
	content: '';
	display: inline-block;
	@include size($width, $height);
	@include hide-text();
}
@mixin ir( $width, $height, $filename ) {
	background: url("../images/${filename}") no-repeat;
	display: block;
	@include size($width, $height);
	@include hide-text();
}

@mixin desaturate( $percent: 100% ) {
	-webkit-filter: grayscale($percent);
	-moz-filter: grayscale($percent);
	filter: grayscale($percent);
}

// Grid helpers
@mixin make-container($gutter: $spacer-large * 2) {
  @include container-fixed($gutter);
  max-width: 100%;
  padding-left: rem($container-gutter-sm);
  padding-right: rem($container-gutter-sm);
  @include screen-sm {
    width: 100%;
  }
  @include screen-md {
    width: $container-md;
    padding-left: floor(($gutter / 2));
    padding-right: ceil(($gutter / 2));
  }
  @include screen-lg {
    width: $container-lg;
  }
}

@mixin container-base($gutter) {
  margin-right: auto;
  margin-left: auto;
  padding-left: rem($container-gutter-sm);
  padding-right: rem($container-gutter-sm);
  max-width: 100%;
  width: 100%;
  @include screen-sm {
    width: $container-sm;
  }
  @include screen-md {
    width: $container-md;
    padding-left: floor(($gutter / 2));
    padding-right: ceil(($gutter / 2));
  }
  @include screen-lg {
    width: $container-lg;
  }
}

@mixin make-flex-container($gutter: $spacer-large * 2) {
  @include container-base($gutter);
  display: flex;
}

@mixin make-flex-container-md($gutter: $spacer-large * 2) {
  @include container-base($gutter);
  @include screen-md {
    display: flex;
  }
}

@mixin flex-row($gutter: $grid-gutter-width/2) {
  display: flex;
  margin-left: -$container-gutter-sm;
  margin-right: -$container-gutter-sm;
  @include screen-md {
    margin-left: -$gutter;
    margin-right: -$gutter;
  }
}

@mixin flex-row-md($gutter: $grid-gutter-width/2) {
  margin-left: -$container-gutter-sm;
  margin-right: -$container-gutter-sm;
  @include screen-md {
    display: flex;
    margin-left: -$gutter;
    margin-right: -$gutter;
  }
}

// hexagons
@mixin hexagon( $size, $color: inherit, $border: 0 ) {
  position: relative;
  width: ($size * 0.577);
  height: $size;
  background-color: $color;
  margin: 0 ($size * 0.288);
  border-top: $border;
  border-bottom: $border;

  &:before,
  &:after {
    content: "";
    position: absolute;
    @if $border == 0 {
      top: 0;
      border-top: ($size/2) solid transparent;
      border-bottom: ($size/2) solid transparent;
    } @else {
      z-index: 1;
      width: ($size * 0.707);
      height: ($size * 0.707);
      transform: scaleX(0.5774) rotate(45deg);
      background-color: inherit;
      top: ($size * 0.129);
    }
  }

  &:before {
    @if $border == 0 {
      right: 100%;
      border-right-width: ($size * 0.288);
      border-right-style: solid;
      border-right-color: $color;
    } @else {
      left: -($size * 0.353);
      border-bottom: $border;
      border-left: $border;
    }
  }

  &:after {
    @if $border == 0 {
      left: 100%;
      border-left-width: ($size * 0.288);
      border-left-style: solid;
      border-left-color: $color;
    } @else {
      right: -($size * 0.353);
      border-top: $border;
      border-right: $border;
    }
  }
}